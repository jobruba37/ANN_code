ANN Analysis: PhD Dissertation using VE Data (Binary Target)
Joseph O'Bruba
11.20.24
Script for importing data from the following spreadsheet:
% Defining the file names and paths (uncomment one line at a time)

% 1) Two Binary Inputs & a Binary Output
% data_filename = 'ANN_dataset_binary_kill.xlsx';
% 2) One Binary Input, One Categorical Input, & a Binary Target Output
data_filename = 'ANN Data\ANN_dataset_binary_kill_VehA.xlsx';

% Read data from the Excel file
ann_data = readtable(data_filename);

% Seperate File Inputs/Outputs (do one file at a time)

% Use for File No. 1
% ann_input = table2array(ann_data(:,1:2));
% ann_target = table2array(ann_data(:,3));

% Use for File No. 2
ann_cat_input = categorical(table2array(ann_data(:,1)));
% One-hot encode the categorical data
cat_input_encoded = onehotencode(ann_cat_input,2);
% Combine the one-hot encoded categorical data with the binary data
% Ensure binaryData is a column vector and in the same size as categoricalData
ann_input = [cat_input_encoded, table2array(ann_data(:,2))];
ann_target = table2array(ann_data(:,3));

% Initialize performance array to store results
iterations = 100;  % Number of iterations
performances = zeros(iterations, 1);
% Create an array to store confusion matrices
confMatAccumulator = zeros(2, 2);

% Run training 100 times and store performance
for i = 1:iterations
    
    % Creating a feed-forward shallow neural network
    hiddenLayerSize = 20; % Number of neurons in the hidden layer
    net = patternnet([hiddenLayerSize hiddenLayerSize],'trainlm');  % patternet is used b/c inputs are categorical

    % Set the network to perform classification
    net.divideParam.trainRatio = 80/100;  % 80% training data
    net.divideParam.valRatio = 10/100;    % 10% validation data
    net.divideParam.testRatio = 10/100;   % 10% test data
    
    % Train the network
    [net, tr] = train(net, ann_input', ann_target');
    
    % Get the performance (e.g., mean squared error)
    performances(i) = tr.best_perf;
    
    % Test the network on the same data (or use separate test set)
    ann_output = net(ann_input');
    
    % Calculate confusion matrix for this iteration
    cmat = confusionmat(vec2ind(ann_target'), vec2ind(ann_output));    
    % Accumulate the confusion matrix
    confMatAccumulator = confMatAccumulator + cmat;
end

% Calculate the average performance
average_performance = mean(performances);
disp(['Average Performance over 100 iterations: ', num2str(average_performance)]);

% Average the confusion matrix
confMatAverage = confMatAccumulator / iterations;
% Plot the final confusion matrix after averaging
figure;
plotconfusion(ann_target', ann_output);
disp('Average Confusion Matrix over 100 iterations:');
disp(confMatAverage');
